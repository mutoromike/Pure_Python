1. Method Overriding
 - This happens when when a subclass has a method which
 also exists in the superclass. The method in the subclass will
 be given precedence. e.g.

 class x:
    def do_y(self, string):
        return string

class y(x):
    def do_y(self):
        return something_else

if you call y.do_y(), the one in y class will be executed

2. Polymorphism: One thing that can take many forms.

3. Slots, defined as __slots__ = ("slot1", "slot2", ), are used to reduce memory usage when dealing with
classes. 

Example:

class Employee:
    __slots__ = ("name", "age")

    def __init__(self, name, age):
        self.name = name
        self.age = age

4. When using class variables, they can be accessed as normal instance variables because of the
   attribute lookup chain. In essence, see below:

    class Employee:

        minimum_wage = 1000

    e = Employee()

    When accessing the class variable "minimum_wage" as e.minimum_wage, it will first
    be checked in e.minimun_wage (as an instance variable) then in Employee.minimum_wage 
    (as a class variable).

5. Composition
    Using class relationships, in a manner that a class instance is assigned to a variable in another class. 
    Example:

    class Project:

        def __init__(self, name, payment, client):
            self.name = name
            self.payment = payment
            self.client = client

    class Employee:
        def __init__(self, name, age, salary, project):
            self.name = name
            self.age = age
            self.salary = salary
            self.project = project

    p = Project("Flask App", 2000, "Flask Corp")
    e = Employee("Steve", 29, 1500, p)

6. Dataclasses
    These are used to shorten the process of defining classes all the time, where, simply, we 
    can have just the class setup defined as a dataclass. 

    Example:

    from dataclasses import dataclass

    @dataclass
    class Project:
        name: str
        payment: int 
        client: str 


